{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/actions/file.actions.ts"],"sourcesContent":["\"use server\";\nimport { createAdminClient, createSessionClient } from \"../appwrite\";\nimport { InputFile } from \"node-appwrite/file\";\nimport { appwriteConfig } from \"../appwrite/config\";\nimport { ID, Models, Query } from \"node-appwrite\";\nimport { constructFileUrl, getFileType, parseStringify } from \"../utils\";\nimport { revalidatePath } from \"next/cache\";\nimport { getCurrentUser } from \"./user.actions\";\n\nconst handleError = (error: unknown, message: string) => {\n    console.log(error, message);\n    throw error;\n}\n\nexport const uploadFile = async ({ file, ownerId, accountId, path }: UploadFileProps) => {\n    const { storage, databases } = await createAdminClient()\n\n    try {\n        // Step 1: Upload file to Appwrite Storage\n        const inputFile = InputFile.fromBuffer(file, file.name)\n        const bucketFile = await storage.createFile(appwriteConfig.bucketId, ID.unique(), inputFile)\n\n        // Step 3: Create your file document\n        const fileDocument = {\n            type: getFileType(bucketFile.name).type,\n            name: bucketFile.name,\n            url: constructFileUrl(bucketFile.$id),\n            extension: getFileType(bucketFile.name).extension,\n            size: bucketFile.sizeOriginal,\n            owner: ownerId,\n            accountId,\n            users: [],\n            bucketFileId: bucketFile.$id,\n        }\n\n        // Step 4: Create document in DB\n        const newFile = await databases.createDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            ID.unique(),\n            fileDocument\n        ).catch(async (error: unknown) => {\n            await storage.deleteFile(appwriteConfig.bucketId, bucketFile.$id)\n            handleError(error, \"Failed to create file document\")\n        })\n\n        revalidatePath(path)\n        return parseStringify(newFile)\n    } catch (error) {\n        handleError(error, \"Failed to upload file\")\n    }\n}\n\nconst createQueries = (currentUser: Models.Document, types: string[], searchText: string, sort: string, limit?: number) => {\n    const queries = [\n        Query.or([\n            Query.equal('owner', [currentUser.$id]),\n            Query.contains('users', [currentUser.email])\n        ])\n    ];\n\n    if (types.length > 0) queries.push(Query.equal('type', types));\n    if (searchText) queries.push(Query.contains('name', searchText));\n    if (limit) queries.push(Query.limit(limit));\n\n    if (sort) {\n        const [sortBy, orderBy] = sort.split('-');\n        queries.push(orderBy === 'asc' ? Query.orderAsc(sortBy) : Query.orderDesc(sortBy));\n    }\n\n    return queries;\n}\n\nexport const getFiles = async ({ types = [], searchText = '', sort = '$createdAt-desc', limit }: GetFilesProps) => {\n    const { databases } = await createAdminClient();\n\n    try {\n        const currentUser = await getCurrentUser();\n        if (!currentUser) {\n            throw new Error(\"User not found\");\n        }\n\n        const queries = createQueries(currentUser, types, searchText, sort, limit);\n        const files = await databases.listDocuments(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            queries,\n        );\n        return parseStringify(files);\n    } catch (error) {\n        handleError(error, \"Failed to get files\");\n    }\n}\n\nexport const renameFile = async ({ fileId, name, extension, path }: RenameFileProps) => {\n    const { databases } = await createAdminClient();\n    try {\n        const newName = `${name}.${extension}`;\n        const updatedFile = await databases.updateDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            fileId,\n            {\n                name: newName,\n            }\n        );\n        revalidatePath(path);\n        return parseStringify(updatedFile);\n    } catch (error) {\n        handleError(error, \"Failed to rename the file\");\n    }\n}\n\nexport const updatedFileUsers = async ({ fileId, emails, path }: UpdateFileUsersProps) => {\n    const { databases } = await createAdminClient();\n    try {\n        const updatedFile = await databases.updateDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            fileId,\n            {\n                users: emails\n            }\n        );\n        revalidatePath(path);\n        return parseStringify(updatedFile);\n    } catch (error) {\n        handleError(error, \"Failed to update the file users\");\n    }\n}\n\nexport const deleteFile = async ({ fileId, bucketFileId, path }: DeleteFileProps) => {\n    const { databases, storage } = await createAdminClient();\n    try {\n        const deletedFile = await databases.deleteDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            fileId\n        );\n\n        if (deletedFile) {\n            await storage.deleteFile(appwriteConfig.bucketId, bucketFileId);\n        }\n\n        revalidatePath(path);\n        return parseStringify(deletedFile);\n    } catch (error) {\n        handleError(error, \"Failed to delete the file\");\n    }\n}\n\nexport async function getTotalSpaceUsed() {\n    try {\n        const { databases } = await createSessionClient();\n        const currentUser = await getCurrentUser();\n        if (!currentUser) throw new Error(\"User is not authenticated.\");\n\n        const files = await databases.listDocuments(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            [Query.equal(\"owner\", [currentUser.$id])],\n        );\n\n        const totalSpace = {\n            image: { size: 0, latestDate: \"\" },\n            document: { size: 0, latestDate: \"\" },\n            video: { size: 0, latestDate: \"\" },\n            audio: { size: 0, latestDate: \"\" },\n            other: { size: 0, latestDate: \"\" },\n            used: 0,\n            all: 2 * 1024 * 1024 * 1024 /* 2GB available bucket storage */,\n        };\n\n        files.documents.forEach((file) => {\n            const fileType = file.type as FileType;\n            totalSpace[fileType].size += file.size;\n            totalSpace.used += file.size;\n\n            if (\n                !totalSpace[fileType].latestDate ||\n                new Date(file.$updatedAt) > new Date(totalSpace[fileType].latestDate)\n            ) {\n                totalSpace[fileType].latestDate = file.$updatedAt;\n            }\n        });\n\n        return parseStringify(totalSpace);\n    } catch (error) {\n        handleError(error, \"Error calculating total space used:, \");\n    }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/.next-internal/server/app/%28root%29/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '001e2dfa10d3d3b2ca9ad8ad1b2bbb0eb05530746a'} from 'ACTIONS_MODULE0'\nexport {createAccount as '7f4205ea856f09245687e1f7d1a5143084ee607872'} from 'ACTIONS_MODULE1'\nexport {getCurrentUser as '7f44fedf725f120aee40a56c2cc4c346d2ea9049a4'} from 'ACTIONS_MODULE1'\nexport {signOutUser as '7f804c3073ffaefc869e312bc0c4cc3144bbc2fdc6'} from 'ACTIONS_MODULE1'\nexport {verifySecret as '7f8415e7784befb7c1678eb0951049579188b44ce6'} from 'ACTIONS_MODULE1'\nexport {signInUser as '7f9f32803a3392a9d4ae9060aef7f5d99b3bac0f17'} from 'ACTIONS_MODULE1'\nexport {sendEmailOTP as '7fa0accb28402a967e922c077dc509347950f3f70b'} from 'ACTIONS_MODULE1'\nexport {createAdminClient as '7f3fcab81e05b108c6f2e065297f5251c297c4265e'} from 'ACTIONS_MODULE2'\nexport {createSessionClient as '7fc1ade0a1736c09e7f6e0007fdbbcca616b747f53'} from 'ACTIONS_MODULE2'\nexport {getFiles as '7f13042a3c947b067b422bdd05a9e5cf0f7c288eb6'} from 'ACTIONS_MODULE3'\nexport {uploadFile as '7f27fa36a148831f3f0229dc023315967776beaac5'} from 'ACTIONS_MODULE3'\nexport {getTotalSpaceUsed as '0060bc9eeac4b2fabc48a683debbc04c7bbbafd7b1'} from 'ACTIONS_MODULE3'\nexport {updatedFileUsers as '7f8ef21cd3a0232a770021246c3d05b4cd228c3115'} from 'ACTIONS_MODULE3'\nexport {deleteFile as '7fe4dccc9897f74b66268a2bad0e663fd2568ec7b4'} from 'ACTIONS_MODULE3'\nexport {renameFile as '7fec5f51c45b4368764e36dd6830e851df864e8e29'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AACA;AAMA;AAEA","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/components/Dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/Dashboard.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/Dashboard.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4R,GACzT,0DACA","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/components/Dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/Dashboard.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/Dashboard.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwQ,GACrS,sCACA","debugId":null}},
    {"offset": {"line": 348, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/app/%28root%29/page.tsx"],"sourcesContent":["// app/(root)/page.tsx - Server Component\n\nimport Dashboard from \"@/components/Dashboard\";\nimport { getFiles, getTotalSpaceUsed } from \"@/lib/actions/file.actions\";\nimport { getUsageSummary } from \"@/lib/utils\";\n\n// Server-side fetch\nconst DashboardPage = async () => {\n  const [files, totalSpace] = await Promise.all([\n    getFiles({ types: [], limit: 10 }),\n    getTotalSpaceUsed(),\n  ]);\n\n  const usageSummary = getUsageSummary(totalSpace);\n\n  return (\n    <Dashboard files={files} usageSummary={usageSummary} totalSpace={totalSpace} />\n  );\n};\n\nexport default DashboardPage;"],"names":[],"mappings":"AAAA,yCAAyC;;;;;AAEzC;AACA;AACA;;;;;AAEA,oBAAoB;AACpB,MAAM,gBAAgB;IACpB,MAAM,CAAC,OAAO,WAAW,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC5C,CAAA,GAAA,iIAAA,CAAA,WAAQ,AAAD,EAAE;YAAE,OAAO,EAAE;YAAE,OAAO;QAAG;QAChC,CAAA,GAAA,iIAAA,CAAA,oBAAiB,AAAD;KACjB;IAED,MAAM,eAAe,CAAA,GAAA,4GAAA,CAAA,kBAAe,AAAD,EAAE;IAErC,qBACE,8OAAC,wHAAA,CAAA,UAAS;QAAC,OAAO;QAAO,cAAc;QAAc,YAAY;;;;;;AAErE;uCAEe","debugId":null}}]
}