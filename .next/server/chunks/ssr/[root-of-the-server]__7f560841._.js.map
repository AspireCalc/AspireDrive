{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/actions/file.actions.ts"],"sourcesContent":["\"use server\";\nimport { createAdminClient } from \"../appwrite\";\nimport { InputFile } from \"node-appwrite/file\";\nimport { appwriteConfig } from \"../appwrite/config\";\nimport { ID, Models, Query } from \"node-appwrite\";\nimport { constructFileUrl, getFileType, parseStringify } from \"../utils\";\nimport { revalidatePath } from \"next/cache\";\nimport { getCurrentUser } from \"./user.actions\";\n\nconst handleError = (error: unknown, message: string) => {\n    console.log(error, message);\n    throw error;\n}\n\nexport const uploadFile = async ({ file, ownerId, accountId, path }: UploadFileProps) => {\n    const { storage, databases } = await createAdminClient();\n    try {\n        const inputFile = InputFile.fromBuffer(file, file.name);\n        const bucketFile = await storage.createFile(appwriteConfig.bucketId, ID.unique(), inputFile);\n        const fileDocument = {\n            type: getFileType(bucketFile.name).type,\n            name: bucketFile.name,\n            url: constructFileUrl(bucketFile.$id),\n            extension: getFileType(bucketFile.name).extension,\n            size: bucketFile.sizeOriginal,\n            owner: ownerId,\n            accountId,\n            users: [],\n            bucketFileId: bucketFile.$id\n        }\n        const newFile = await databases.createDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            ID.unique(),\n            fileDocument,\n        ).catch(async (error: unknown) => {\n            await storage.deleteFile(appwriteConfig.bucketId, bucketFile.$id);\n            handleError(error, \"Failed to create an file document\")\n        });\n\n        revalidatePath(path);\n        return parseStringify(newFile);\n    } catch (error) {\n        handleError(error, \"Failed to upload file\");\n    }\n}\n\nconst createQueries = (currentUser: Models.Document) => {\n    const queries = [\n        Query.or([\n            Query.equal('owner', [currentUser.$id]),\n            Query.contains('users', [currentUser.email])\n        ])\n    ];\n\n    return queries;\n}\n\nexport const getFiles = async () => {\n    const { databases } = await createAdminClient();\n\n    try {\n        const currentUser = await getCurrentUser();\n        if (!currentUser) {\n            throw new Error(\"User not found\");\n        }\n\n        const queries = createQueries(currentUser);\n        console.log({currentUser, queries});\n        \n        const files = await databases.listDocuments(\n            appwriteConfig.databaseId,\n            appwriteConfig.fileCollectionId,\n            queries,\n        );\n\n        console.log({ files });\n        \n        return parseStringify(files);\n    } catch (error) {\n        handleError(error, \"Failed to get files\");\n    }\n}"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;AAEA,MAAM,cAAc,CAAC,OAAgB;IACjC,QAAQ,GAAG,CAAC,OAAO;IACnB,MAAM;AACV;AAEO,MAAM,aAAa,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAmB;IAChF,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;IACrD,IAAI;QACA,MAAM,YAAY,sJAAA,CAAA,YAAS,CAAC,UAAU,CAAC,MAAM,KAAK,IAAI;QACtD,MAAM,aAAa,MAAM,QAAQ,UAAU,CAAC,yHAAA,CAAA,iBAAc,CAAC,QAAQ,EAAE,+IAAA,CAAA,KAAE,CAAC,MAAM,IAAI;QAClF,MAAM,eAAe;YACjB,MAAM,CAAA,GAAA,4GAAA,CAAA,cAAW,AAAD,EAAE,WAAW,IAAI,EAAE,IAAI;YACvC,MAAM,WAAW,IAAI;YACrB,KAAK,CAAA,GAAA,4GAAA,CAAA,mBAAgB,AAAD,EAAE,WAAW,GAAG;YACpC,WAAW,CAAA,GAAA,4GAAA,CAAA,cAAW,AAAD,EAAE,WAAW,IAAI,EAAE,SAAS;YACjD,MAAM,WAAW,YAAY;YAC7B,OAAO;YACP;YACA,OAAO,EAAE;YACT,cAAc,WAAW,GAAG;QAChC;QACA,MAAM,UAAU,MAAM,UAAU,cAAc,CAC1C,yHAAA,CAAA,iBAAc,CAAC,UAAU,EACzB,yHAAA,CAAA,iBAAc,CAAC,gBAAgB,EAC/B,+IAAA,CAAA,KAAE,CAAC,MAAM,IACT,cACF,KAAK,CAAC,OAAO;YACX,MAAM,QAAQ,UAAU,CAAC,yHAAA,CAAA,iBAAc,CAAC,QAAQ,EAAE,WAAW,GAAG;YAChE,YAAY,OAAO;QACvB;QAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO,CAAA,GAAA,4GAAA,CAAA,iBAAc,AAAD,EAAE;IAC1B,EAAE,OAAO,OAAO;QACZ,YAAY,OAAO;IACvB;AACJ;AAEA,MAAM,gBAAgB,CAAC;IACnB,MAAM,UAAU;QACZ,kJAAA,CAAA,QAAK,CAAC,EAAE,CAAC;YACL,kJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,SAAS;gBAAC,YAAY,GAAG;aAAC;YACtC,kJAAA,CAAA,QAAK,CAAC,QAAQ,CAAC,SAAS;gBAAC,YAAY,KAAK;aAAC;SAC9C;KACJ;IAED,OAAO;AACX;AAEO,MAAM,WAAW;IACpB,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;IAE5C,IAAI;QACA,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,iBAAc,AAAD;QACvC,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM,UAAU,cAAc;QAC9B,QAAQ,GAAG,CAAC;YAAC;YAAa;QAAO;QAEjC,MAAM,QAAQ,MAAM,UAAU,aAAa,CACvC,yHAAA,CAAA,iBAAc,CAAC,UAAU,EACzB,yHAAA,CAAA,iBAAc,CAAC,gBAAgB,EAC/B;QAGJ,QAAQ,GAAG,CAAC;YAAE;QAAM;QAEpB,OAAO,CAAA,GAAA,4GAAA,CAAA,iBAAc,AAAD,EAAE;IAC1B,EAAE,OAAO,OAAO;QACZ,YAAY,OAAO;IACvB;AACJ;;;IApEa;IA4CA;;AA5CA,+OAAA;AA4CA,+OAAA","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/.next-internal/server/app/%28root%29/%5Btype%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {$$RSC_SERVER_ACTION_0 as '001e2dfa10d3d3b2ca9ad8ad1b2bbb0eb05530746a'} from 'ACTIONS_MODULE0'\nexport {createAccount as '7f4205ea856f09245687e1f7d1a5143084ee607872'} from 'ACTIONS_MODULE1'\nexport {getCurrentUser as '7f44fedf725f120aee40a56c2cc4c346d2ea9049a4'} from 'ACTIONS_MODULE1'\nexport {signOutUser as '7f804c3073ffaefc869e312bc0c4cc3144bbc2fdc6'} from 'ACTIONS_MODULE1'\nexport {verifySecret as '7f8415e7784befb7c1678eb0951049579188b44ce6'} from 'ACTIONS_MODULE1'\nexport {signInUser as '7f9f32803a3392a9d4ae9060aef7f5d99b3bac0f17'} from 'ACTIONS_MODULE1'\nexport {sendEmailOTP as '7fa0accb28402a967e922c077dc509347950f3f70b'} from 'ACTIONS_MODULE1'\nexport {createAdminClient as '7f3fcab81e05b108c6f2e065297f5251c297c4265e'} from 'ACTIONS_MODULE2'\nexport {creatSessionClient as '7fa690d3837137463c3153def754198bd4c9636552'} from 'ACTIONS_MODULE2'\nexport {uploadFile as '7f27fa36a148831f3f0229dc023315967776beaac5'} from 'ACTIONS_MODULE3'\nexport {getFiles as '7f13042a3c947b067b422bdd05a9e5cf0f7c288eb6'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AACA;AAMA;AAEA","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/components/Sort.tsx"],"sourcesContent":["import React from 'react'\n\nconst Sort = () => {\n  return (\n    <div>Sort</div>\n  )\n}\n\nexport default Sort"],"names":[],"mappings":";;;;;AAEA,MAAM,OAAO;IACX,qBACE,8OAAC;kBAAI;;;;;;AAET;uCAEe","debugId":null}}]
}