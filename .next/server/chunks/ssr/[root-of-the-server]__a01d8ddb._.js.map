{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/appwrite/config.ts"],"sourcesContent":["export const appwriteConfig = {\n    endpointUrl: process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT!,\n    projectId: process.env.NEXT_PUBLIC_APPWRITE_PROJECT!,\n    databaseId: process.env.NEXT_PUBLIC_APPWRITE_DATABASE!,\n    userCollectionId: process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION!,\n    fileCollectionId: process.env.NEXT_PUBLIC_APPWRITE_FILES_COLLECTION!,\n    bucketId: process.env.NEXT_PUBLIC_APPWRITE_BUCKET!,\n    secretKey: process.env.NEXT_APPWRITE_SECRET_KEY!\n}"],"names":[],"mappings":";;;AAAO,MAAM,iBAAiB;IAC1B,WAAW;IACX,SAAS;IACT,UAAU;IACV,gBAAgB;IAChB,gBAAgB;IAChB,QAAQ;IACR,WAAW,QAAQ,GAAG,CAAC,wBAAwB;AACnD","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/appwrite/index.ts"],"sourcesContent":["\"use server\";\n\nimport { Account, Avatars, Client, Databases, Storage } from \"node-appwrite\"\nimport { appwriteConfig } from \"./config\"\nimport { cookies } from \"next/headers\";\n\nexport const creatSessionClient = async () => {\n    const client = new Client()\n        .setEndpoint(appwriteConfig.endpointUrl)\n        .setProject(appwriteConfig.projectId);\n\n    const session = (await cookies()).get('appwrite-session');\n\n    if (!session || !session.value) throw new Error('No session');\n    client.setSession(session.value);\n\n    return {\n        get account() {\n            return new Account(client);\n        },\n        get databases() {\n            return new Databases(client);\n        }\n    }\n};\n\nexport const createAdminClient = async () => {\n    const client = new Client()\n        .setEndpoint(appwriteConfig.endpointUrl)\n        .setProject(appwriteConfig.projectId)\n        .setKey(appwriteConfig.secretKey);\n\n    return {\n        get account() {\n            return new Account(client);\n        },\n        get databases() {\n            return new Databases(client);\n        },\n        get storage() {\n            return new Storage(client);\n        },\n        get avatars() {\n            return new Avatars(client);\n        }\n    }\n};"],"names":[],"mappings":";;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;AAEO,MAAM,qBAAqB;IAC9B,MAAM,SAAS,IAAI,mKAAA,CAAA,SAAM,GACpB,WAAW,CAAC,yHAAA,CAAA,iBAAc,CAAC,WAAW,EACtC,UAAU,CAAC,yHAAA,CAAA,iBAAc,CAAC,SAAS;IAExC,MAAM,UAAU,CAAC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC;IAEtC,IAAI,CAAC,WAAW,CAAC,QAAQ,KAAK,EAAE,MAAM,IAAI,MAAM;IAChD,OAAO,UAAU,CAAC,QAAQ,KAAK;IAE/B,OAAO;QACH,IAAI,WAAU;YACV,OAAO,IAAI,gKAAA,CAAA,UAAO,CAAC;QACvB;QACA,IAAI,aAAY;YACZ,OAAO,IAAI,kKAAA,CAAA,YAAS,CAAC;QACzB;IACJ;AACJ;AAEO,MAAM,oBAAoB;IAC7B,MAAM,SAAS,IAAI,mKAAA,CAAA,SAAM,GACpB,WAAW,CAAC,yHAAA,CAAA,iBAAc,CAAC,WAAW,EACtC,UAAU,CAAC,yHAAA,CAAA,iBAAc,CAAC,SAAS,EACnC,MAAM,CAAC,yHAAA,CAAA,iBAAc,CAAC,SAAS;IAEpC,OAAO;QACH,IAAI,WAAU;YACV,OAAO,IAAI,gKAAA,CAAA,UAAO,CAAC;QACvB;QACA,IAAI,aAAY;YACZ,OAAO,IAAI,kKAAA,CAAA,YAAS,CAAC;QACzB;QACA,IAAI,WAAU;YACV,OAAO,IAAI,gKAAA,CAAA,UAAO,CAAC;QACvB;QACA,IAAI,WAAU;YACV,OAAO,IAAI,gKAAA,CAAA,UAAO,CAAC;QACvB;IACJ;AACJ;;;IAxCa;IAoBA;;AApBA,+OAAA;AAoBA,+OAAA","debugId":null}},
    {"offset": {"line": 313, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const parseStringify = (value: unknown) => {\n  return JSON.parse(JSON.stringify(value));\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;AACnC","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/lib/actions/user.actions.ts"],"sourcesContent":["\"use server\";\nimport { string } from \"zod\";\nimport { createAdminClient } from \"../appwrite\";\nimport { appwriteConfig } from \"../appwrite/config\";\nimport { ID, Query } from \"node-appwrite\";\nimport { parseStringify } from \"../utils\";\nimport { cookies } from \"next/headers\";\n\nconst getUserByEmail = async (email: string) => {\n    const { databases } = await createAdminClient();\n    const result = await databases.listDocuments(\n        appwriteConfig.databaseId,\n        appwriteConfig.userCollectionId,\n        [Query.equal(\"email\", [email])],\n    )\n    return result.total > 0 ? result.documents[0] : null;\n}\n\nconst handleError = (error: unknown, message: string) => {\n    console.log(error, message);\n    throw error;\n}\n\nexport const sendEmailOTP = async ({ email }: { email: string }) => {\n    const { account } = await createAdminClient();\n    try {\n        const session = await account.createEmailToken(ID.unique(), email);\n\n        return session.userId;\n    } catch (error) {\n        handleError(error, \"Failed to send OTP to the email\")\n    }\n}\n\nexport const createAccount = async ({ fullName, email }: { fullName: string, email: string }) => {\n    const existingUser = await getUserByEmail(email);\n    const accountId = await sendEmailOTP({ email });\n\n    if (!accountId) throw new Error(\"Failed to send an OTP\");\n    if (!existingUser) {\n        const { databases } = await createAdminClient();\n        await databases.createDocument(\n            appwriteConfig.databaseId,\n            appwriteConfig.userCollectionId,\n            ID.unique(),\n            {\n                fullName,\n                email,\n                avatar: 'https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png?20150327203541',\n                accountId\n            },\n        );\n    }\n\n    return parseStringify({ accountId });\n};\n\nexport const verifySecret = async ({ accountId, password }: { accountId: string, password: string }) => {\n    try {\n        const { account } = await createAdminClient();\n        const session = await account.createSession(accountId, password);\n        (await cookies()).set(\"appwrite-session\", session.secret, {\n            path: '/',\n            httpOnly: true,\n            sameSite: \"strict\",\n            secure: true\n        });\n        return parseStringify({sessionId: session.$id});\n    } catch (error) {\n        handleError(error, \"Failed to verify OTP\");\n    }\n}"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;AAEA,MAAM,iBAAiB,OAAO;IAC1B,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;IAC5C,MAAM,SAAS,MAAM,UAAU,aAAa,CACxC,yHAAA,CAAA,iBAAc,CAAC,UAAU,EACzB,yHAAA,CAAA,iBAAc,CAAC,gBAAgB,EAC/B;QAAC,kJAAA,CAAA,QAAK,CAAC,KAAK,CAAC,SAAS;YAAC;SAAM;KAAE;IAEnC,OAAO,OAAO,KAAK,GAAG,IAAI,OAAO,SAAS,CAAC,EAAE,GAAG;AACpD;AAEA,MAAM,cAAc,CAAC,OAAgB;IACjC,QAAQ,GAAG,CAAC,OAAO;IACnB,MAAM;AACV;AAEO,MAAM,eAAe,OAAO,EAAE,KAAK,EAAqB;IAC3D,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;IAC1C,IAAI;QACA,MAAM,UAAU,MAAM,QAAQ,gBAAgB,CAAC,+IAAA,CAAA,KAAE,CAAC,MAAM,IAAI;QAE5D,OAAO,QAAQ,MAAM;IACzB,EAAE,OAAO,OAAO;QACZ,YAAY,OAAO;IACvB;AACJ;AAEO,MAAM,gBAAgB,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAuC;IACxF,MAAM,eAAe,MAAM,eAAe;IAC1C,MAAM,YAAY,MAAM,aAAa;QAAE;IAAM;IAE7C,IAAI,CAAC,WAAW,MAAM,IAAI,MAAM;IAChC,IAAI,CAAC,cAAc;QACf,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;QAC5C,MAAM,UAAU,cAAc,CAC1B,yHAAA,CAAA,iBAAc,CAAC,UAAU,EACzB,yHAAA,CAAA,iBAAc,CAAC,gBAAgB,EAC/B,+IAAA,CAAA,KAAE,CAAC,MAAM,IACT;YACI;YACA;YACA,QAAQ;YACR;QACJ;IAER;IAEA,OAAO,CAAA,GAAA,4GAAA,CAAA,iBAAc,AAAD,EAAE;QAAE;IAAU;AACtC;AAEO,MAAM,eAAe,OAAO,EAAE,SAAS,EAAE,QAAQ,EAA2C;IAC/F,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wHAAA,CAAA,oBAAiB,AAAD;QAC1C,MAAM,UAAU,MAAM,QAAQ,aAAa,CAAC,WAAW;QACvD,CAAC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,oBAAoB,QAAQ,MAAM,EAAE;YACtD,MAAM;YACN,UAAU;YACV,UAAU;YACV,QAAQ;QACZ;QACA,OAAO,CAAA,GAAA,4GAAA,CAAA,iBAAc,AAAD,EAAE;YAAC,WAAW,QAAQ,GAAG;QAAA;IACjD,EAAE,OAAO,OAAO;QACZ,YAAY,OAAO;IACvB;AACJ;;;IAhDa;IAWA;IAuBA;;AAlCA,+OAAA;AAWA,+OAAA;AAuBA,+OAAA","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/.next-internal/server/app/%28auth%29/signup/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {createAccount as '7f4205ea856f09245687e1f7d1a5143084ee607872'} from 'ACTIONS_MODULE0'\nexport {sendEmailOTP as '7fa0accb28402a967e922c077dc509347950f3f70b'} from 'ACTIONS_MODULE0'\nexport {verifySecret as '7f8415e7784befb7c1678eb0951049579188b44ce6'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/components/AuthForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/AuthForm.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/AuthForm.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","debugId":null}},
    {"offset": {"line": 506, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/components/AuthForm.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/AuthForm.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/AuthForm.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file:///Users/tushar/Documents/aspiredrive/app/%28auth%29/signup/page.tsx"],"sourcesContent":["import AuthForm from '@/components/AuthForm';\n\nconst SignUp = () => <AuthForm type=\"signup\" />;\n\nexport default SignUp"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,SAAS,kBAAM,8OAAC,uHAAA,CAAA,UAAQ;QAAC,MAAK;;;;;;uCAErB","debugId":null}}]
}